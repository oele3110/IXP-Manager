<?php

namespace Repositories;

use Doctrine\ORM\EntityRepository;

/**
 * RPKI Validation
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RpkiValidation extends EntityRepository
{


	/**
	*	[
	*		[total] => 10
	*		[unknown] => 5
	*		[invalid] => 2
	*		[valid] => 3
	*	]
	*/


	public function aggregateRpkiSummariesForCustomer ( $custid )
	{
		$summary = $this->_initialiseAggregateRpkiSummariesArray();


		foreach( \Entities\RpkiValidation::$SUMMARY_TYPES_FNS as $type => $fn )
        {
            if( $sum = $this->$fn( $protocol, $custid ) )
            {
                $summary[ $type ]['total'] += $sum['rpki'];
                $summary[ 'total' ] += $sum['rpki'];
            }
        }
    
        return $summary;


	}



	/**
     * Return rpki counts for all customers as an aggregated array.
     *
     * A sample element of the array is (RS = Route Server):
     *
     *     [64] => [                   // customer ID
     *         [total] => 10           // total rpki entries
     *         [adv_acc] => 5
     *         
     *         [adv_nacc] => 2
     *         
     *         [nadv_acc] => 3
     *         [name] => Customer Name
     *     ]
     *
     *
     * @return array RPKI counts for all customers as an aggregated array
     */
	public function aggregateRpkiSummaries( $cust )
	{
		$summary = [];
        
        foreach( \Entities\RpkiValidation::$SUMMARY_TYPES_FNS as $type => $fn )
        {
            
            foreach( $this->$fn( $cust ) as $rpki)
            {
                //echo "rpki " . $rpki . "<br>############<br>";
                //echo $rpki['prefix'] . "<br>";
                //echo "value " . $value . "<br>############<br>";

                //echo "at " . $rpki[1] . "<br>############<br>";
                //echo $rpki['validity'] . ": " .$rpki['rpkis'] . "<br>";
                /*
                // initialise customer's summary array if necessary
                if( !isset( $summary[ $rpki['id'] ] ) )
                {
                    $summary[ $rpki['id'] ] = $this->_initialiseAggregateRpkiSummariesArray();
                    $summary[ $rpki['id'] ][ 'name' ] = $rpki['name'];
                }
                
                $summary[ $rpki['id'] ][ $type ]['total'] += $rpki['rpkis'];
                $summary[ $rpki['id'] ][ 'total' ] += $rpki['rpkis'];
                */
                $summary[ $type ] = $rpki['rpkis'];
            }
            
        }
        /*
        foreach ($summary as $type => $value) {
            echo $type . ": " . $value . "<br>";
        }
        */

        return $summary;
	}






	private function _initialiseAggregateRpkiSummariesArray()
	{
		$init = [
			'total' => 0
		];

		foreach( \Entities\RpkiValidation::$SUMMARY_TYPES_FNS as $type => $fn )
        {
            $init[ $type ] = 0;
        }
	}


	public function getSummaryRpkiUnknown( $cust = null )
    {
        return $this->getSummaryRpki( 'U', $cust );
    }

    public function getSummaryRpkiInvalid( $cust = null )
    {
        return $this->getSummaryRpki( 'IV', $cust );
    }

    public function getSummaryRpkiValid( $cust = null )
    {
        return $this->getSummaryRpki( 'V', $cust );
    }


    public function getSummaryRpki( $val, $cust = null )
    {

        $sql = 'SELECT rpki.validity AS validity, count(rpki.validity) AS rpkis 

                FROM \\Entities\\RpkiValidation rpki
                    LEFT JOIN rpki.RSPrefix rs

                WHERE
                    rpki.validity = ?1 '
                    . ( $cust === null ? '' : ' AND rs.custid = ?2 ' ) . '

                GROUP BY 
                    rpki.validity 
                ORDER BY 
                    rs.rs_origin';

        //echo $sql . "<br><br>";


        $query = $this->getEntityManager()->createQuery( $sql )
            ->setParameter( 1, $val ); 

        if( $cust !== null )
            $query->setParameter( 2, $cust );
        /*
    	if( $cust !== null )
        {
            try
            {
                return $query->setParameter( 2, $cust )
                    ->getSingleResult();
            }
            catch( \Doctrine\ORM\NoResultException $e )
            {
                return false;
            }
        }*/
        
        return $query->getArrayResult();
    }



	public function aggregateRpki( $cust )
    {
        $aggRpki = [];
    
        foreach( \Entities\RpkiValidation::$RPKI_TYPES_FNS as $type => $fn )
            $aggRpki[ $type ] = $this->$fn( $cust );
        /*
        echo "RPKI length: " . sizeof($aggRpki);
        echo "<br>unknown length: " . sizeof($aggRpki['unknown']);
        echo "<br>invalid length: " . sizeof($aggRpki['invalid']);
        echo "<br>valid length: " . sizeof($aggRpki['valid']);

        echo "<br>entry 1: " . $aggRpki['valid'][0][prefix] . " " . $aggRpki['valid'][0][rs_origin] . " " . $aggRpki['valid'][0][validity] . " " . $aggRpki['valid'][0][info] . " ";
        echo "<br>entry 2: " . $aggRpki['valid'][1][prefix] . " " . $aggRpki['valid'][1][rs_origin] . " " . $aggRpki['valid'][1][validity] . " " . $aggRpki['valid'][1][info] . " ";
        */
        return $aggRpki;
    }

	public function getRpkiUnknown( $cust = null ) 
	{
		return $this->getRpki('U', $cust);
	}

	public function getRpkiInvalid( $cust = null ) 
	{
		return $this->getRpki('IV', $cust);
	}

	public function getRpkiValid( $cust = null ) 
	{
		return $this->getRpki('V', $cust);
	}


	public function getRpki( $val, $cust = null ) 
	{
        $sql = 'SELECT rs.prefix AS prefix, rs.timestamp AS timestamp, rs.rs_origin AS rs_origin,
                       rpki.validity AS validity, rpki.info AS info, rs.custid AS custid

                FROM \\Entities\\RpkiValidation rpki
                    LEFT JOIN rpki.RSPrefix rs

                WHERE
                    rpki.validity = ?1 '
                    . ( $cust === null ? '' : ' AND rs.custid = ?2 ' ) . '

                ORDER BY
                    rs.timestamp';

        
        //$query = $this->getEntityManager()->createQuery( $sql );

        $query = $this->getEntityManager()->createQuery( $sql )
            ->setParameter( 1, $val ); 

        if( $cust !== null )
            $query->setParameter( 2, $cust );
        /*
    	$query = $this->getEntityManager()->createQuery( $sql )
            ->setParameter( 1, $val );

		if( $cust !== null )
            $query->setParameter( 2, $cust );
        */
        return $query->getArrayResult();

	}

    public function getAllCustomer() 
    {
        $sql = 'SELECT c.name AS custName
                FROM \\Entities\\Customer c';

        $query = $this->getEntityManager()->createQuery( $sql );

        return $query->getArrayResult();
    }

    // unused
    public function getMyAsn( $cust ) 
    {
        $sql = 'SELECT c.autsys AS myAsn
                FROM \\Entities\\Customer c
                WHERE c.id = ?1';

        $query = $this->getEntityManager()->createQuery( $sql )
            ->setParameter( 1, $cust );

        return $query->getArrayResult();
    }

    public function getOtherPrefixes( $myAsn, $val, $cust )
    {   
        $sql = 'SELECT rs.prefix AS prefix, rs.timestamp AS timestamp, rs.rs_origin AS rs_origin,
                    rpki.validity AS validity, rpki.info AS info, rs.custid AS custid

                FROM \\Entities\\RpkiValidation rpki
                    LEFT JOIN rpki.RSPrefix rs
                        LEFT JOIN rpki.RpkiRoa roa

                WHERE (rs.rs_origin = ?1
                OR roa.asn = ?1)
                AND rpki.validity = ?2
                AND rs.custid = ?3';
        /*
        $sql = 'SELECT rs.prefix AS prefix, rs.timestamp AS timestamp, rs.rs_origin AS rs_origin,
                    rpki.validity AS validity, rpki.info AS info, rs.custid AS custid

                FROM \\Entities\\RpkiValidation rpki
                    LEFT JOIN rpki.RSPrefix rs
                        LEFT JOIN rpki.RpkiRoa roa

                WHERE roa.asn = ?1
                AND rpki.validity =  \'IV\'
                AND rs.custid IS NOT NULL';
                */
        /*
        $sql = 'SELECT rpki.validity AS validity, rpki.info AS info, roa.asn AS asn

                FROM \\Entities\\RpkiValidation rpki
                    LEFT JOIN rpki.RpkiRoa roa

                WHERE roa.asn = ?1 
                AND rpki.validity = \'IV\'';
        */
        $query = $this->getEntityManager()->createQuery( $sql )->setParameter( 1, $myAsn );
        $query->setParameter( 2, $val );
        $query->setParameter( 3, $cust );
        //$query = $this->getEntityManager()->createQuery( $sql );

        return $query->getArrayResult();
    }
    
}
